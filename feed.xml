<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yusufadell.github.io/yusufadell/</id><title>Yusuf Adel</title><subtitle>A blog to share idead i read from a book, an article ot tools i've been using which i found interesting to sahre with you.</subtitle> <updated>2023-02-11T13:40:23+02:00</updated> <author> <name>Yusuf Adel</name> <uri>https://yusufadell.github.io/yusufadell/</uri> </author><link rel="self" type="application/atom+xml" href="https://yusufadell.github.io/yusufadell/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yusufadell.github.io/yusufadell/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Yusuf Adel </rights> <icon>/yusufadell/assets/img/favicons/favicon.ico</icon> <logo>/yusufadell/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Before APIs, there were Web Services</title><link href="https://yusufadell.github.io/yusufadell/posts/before-api-there-were-web-services/" rel="alternate" type="text/html" title="Before APIs, there were Web Services" /><published>2022-09-17T00:00:00+02:00</published> <updated>2022-09-17T00:00:00+02:00</updated> <id>https://yusufadell.github.io/yusufadell/posts/before-api-there-were-web-services/</id> <content src="https://yusufadell.github.io/yusufadell/posts/before-api-there-were-web-services/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://github.com/yusufadell"}</name> </author> <category term="Web" /> <summary> WEB APIs Web API literally sits on top of the existing architecture of the world wide web and relies on a host of technologies including HTTP, TCP/IP, and more. ==Ultimately, a web API is a collection of endpoints that expose certain parts of an underlying database.== As developers we control the URLs for each endpoint, what underlying data is available, and what actions are possible via... </summary> </entry> <entry><title>Instance Static Class Methods in a Nutshell</title><link href="https://yusufadell.github.io/yusufadell/posts/static-class-method-in-nutshell/" rel="alternate" type="text/html" title="Instance Static Class Methods in a Nutshell" /><published>2022-04-08T00:00:00+02:00</published> <updated>2022-09-17T18:41:24+02:00</updated> <id>https://yusufadell.github.io/yusufadell/posts/static-class-method-in-nutshell/</id> <content src="https://yusufadell.github.io/yusufadell/posts/static-class-method-in-nutshell/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://github.com/yusufadell"}</name> </author> <category term="Python" /> <summary> Instance - Static - Class Methods instance - static - class and propetry methods python class MyClass: # obj = MyClass # Same as MyClass().method(obj) def method(the_object): return 'instance method called' the_object @classmethod def classmethod(the_class): return 'class method called' the_class @staticmethod def staticmethod(): return '... </summary> </entry> <entry><title>Inheritance in a NutShell!</title><link href="https://yusufadell.github.io/yusufadell/posts/Inheritance-in-a-NutShell/" rel="alternate" type="text/html" title="Inheritance in a NutShell!" /><published>2022-04-01T00:00:00+02:00</published> <updated>2022-09-17T18:45:15+02:00</updated> <id>https://yusufadell.github.io/yusufadell/posts/Inheritance-in-a-NutShell/</id> <content src="https://yusufadell.github.io/yusufadell/posts/Inheritance-in-a-NutShell/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> Inheritance is a technique for code reuse. It lets you create child classes that inherit the methods of their parent classes. You can override the methods to provide new code for them but also use the super() function to call the original methods in the parent class. A child class has an “is a” relationship with its parent class, because an object of the child class is a kind of object of the p... </summary> </entry> <entry><title>Why not to use Inheritance</title><link href="https://yusufadell.github.io/yusufadell/posts/Why-not-to-use-inthereiance/" rel="alternate" type="text/html" title="Why not to use Inheritance" /><published>2022-03-30T00:00:00+02:00</published> <updated>2022-09-17T18:45:15+02:00</updated> <id>https://yusufadell.github.io/yusufadell/posts/Why-not-to-use-inthereiance/</id> <content src="https://yusufadell.github.io/yusufadell/posts/Why-not-to-use-inthereiance/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> It’s easy to overengineer your classes using inheritance. As Luciano Ramalho states, “Placing objects in a neat hierarchy appeals to our sense of order; programmers do it just for fun.” We’ll create classes, subclasses, and sub-subclasses when a single class, or a couple of functions in a mod- ule, would achieve the same effect. But recall the Zen of Python tenet in Chapter 6 that simple is bet... </summary> </entry> <entry><title>Method and Decorators (Part 2)</title><link href="https://yusufadell.github.io/yusufadell/posts/Methods-and-Decorators-part(2)/" rel="alternate" type="text/html" title="Method and Decorators (Part 2)" /><published>2022-03-29T00:00:00+02:00</published> <updated>2022-09-17T18:40:37+02:00</updated> <id>https://yusufadell.github.io/yusufadell/posts/Methods-and-Decorators-part(2)/</id> <content src="https://yusufadell.github.io/yusufadell/posts/Methods-and-Decorators-part(2)/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> Writing Decorators As mentioned, decorators are often used when refactoring repeated code around functions. Consider the following set of functions that need to check whether the username they receive as an argument is the admin or not and, if the user is not an admin, raise an exception: class Store: def get_food(self, username, food): if username != 'admin': raise Ex... </summary> </entry> </feed>
